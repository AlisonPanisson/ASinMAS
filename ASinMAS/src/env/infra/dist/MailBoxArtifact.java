// CArtAgO artifact code for project central_server

/**
 * Artifact used by the DistAgArch agent architecture to implementing the communication between two agents.
 * It's use is based on the events generated by it's observable properties updating (observing the CArtAgO act-perceive model).
 * 
 * 
 * Agents write messages in the artifact (internal buffer implemented using a ConcurentLinkedQueue) using the operation "writeOutBox". 
 * This writing generates an event that is perceived and treated by other agents observing the artifact (through the agent's "perceive" method). 
 * 
 * 
 */

package infra.dist;

import jason.asSemantics.Message;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

import cartago.Artifact;
import cartago.OPERATION;


/**
 *<p>CArtAgO used to intermediate the communication between Jason agents.
 *
 *<p>This artifact provides two types of message exchange:
 *
 *<p> The first mode (used by default) uses the method <i>writeOutBoxInstant</i>. In this mode a message received from an agent 
 * is instantly used to update a predefined observable property (DEFAULT_OBSERVABLE_PROP). The property update generates an event
 * that is perceived by the target agent.
 *
 * <p>The second mode uses the method <i>writeOutBoxBuffered</i>. This mode uses a buffered strategy in which an intermediary buffer is uses
 * to store the messages before they are sent.
 *
 * @author SeaTeaMS Project
 *
 */
public class MailBoxArtifact extends Artifact {
	
	private Queue<Message> outBox;
	
	/**
	 * Static attribute that stores the name of the <i>Object Property</i> updated with the content of a received
	 * message.
	 */
	public static final String DEFAULT_OBSERVABLE_PROP = "message";
	
	/*
	 * Automatically called to initialize the agent.
	 */
	void init() {		
		defineObsProperty(DEFAULT_OBSERVABLE_PROP, "");
		outBox = new ConcurrentLinkedQueue<Message>();
	}
	
	/**
	 * <p>Updates a specific observable property (OBSERVABLE_PROPERTY) with the content of a Jason's message.
	 * The message is extracted from the artifact's message local buffer.
	 * 
	 * <p>This method has no return, however, the property update generates an event that allows the agents focusing the artifact
	 * to receive the property value. 
	 */
	@OPERATION
	public void readOutBox(){
		Message ms = this.outBox.poll();
		updateObsProperty(DEFAULT_OBSERVABLE_PROP, ms.toString());
	}
	
	
	/**
	 *<p> Updates a observable property with a Message's content.
	 * The property updating generates an ArtifactObsEvent that carries the property's content
	 * and can be perceived by all the agents focusing the artifact.
	 * 
	 *<p> The property updating is conducted right after the the message is received (different from the buffered writting).
	 * 
	 * @param msg String containing the message to be sent (can be obtained using the .toString from a Message object).
	 * 
	 * @return true - message correctly written.
	 */
	@OPERATION
	public boolean writeOutBoxInstant(String msg){	
		//System.out.println("MESSAGE: "+msg.toString());
		this.updateObsProperty(DEFAULT_OBSERVABLE_PROP, msg); //updates the observable property causing a
		return(true);
	}
	
	/**
	 *<p>  Adds a Message to a buffer (queue). This queue is automatically consulted and the messages on it is used to update an artifact's observable
	 *  property.
	 *  
	 *<p>  The update generates an ArtifactObsEvent that carries the property value that can be perceived by the agent's focusing the artifact.
	 *  
	 *<p>  This method has the same objective as the "writeOutBoxInstant", however, in this one the messages are stored in a buffers before sent. This fact implies that the messages
	 *  can take longer to be sent. 
	 *  
	 * @param msg Messages to be bufferd.
	 * @return
	 */
	@OPERATION
	public boolean writeOutBoxBuffered(Message msg){
		this.outBox.offer(msg);	
		return(true);
	}
	
	/**
	 * Initiates the negotiation between a central server and a client agents. 
	 * The client agent passes it's name to the central server agent. 
	 * @param agName The client agent passes its name 
	 */
	@OPERATION
	public void connectToMailBox(String agName){
		signal("connection",agName);
	}
	
}
